{% extends ':default:layout.html.twig' %}

{% block title %}Purchase Order{% endblock %}

{% block page_title %}
    Purchase Order
{% endblock page_title %}

{% block page_name %}
    <a href="{{ path('warehouse_show', { 'id': purchaseOrder.warehouse.id }) }}">< Back to {{ purchaseOrder.warehouse.name }}</a>
{% endblock page_name %}

{% block actions %}
{% endblock actions %}

{% block footer %}
    <script>
        $(function() {

            $("#warehouse").val('{{ purchaseOrder.warehouse.id }}');
            {% if purchaseOrder.status.name == 'Active' %}
            $(".ordered-quantity .ui-spinner-button").hide();
            {% else %}
            $(".ui-spinner-button").hide();
            {% endif %}
        });

        (function () {
            'use strict';
            angular.module('myApp',['ngMaterial', 'ngMessages'])
                    .controller('myCtrl', MyCtrl)
                    .directive('jqSpinner', jqSpinner);

            function MyCtrl ($timeout, $q, $log, $scope) {
                var self = this;

                self.simulateQuery = false;
                self.isDisabled    = false;

                self.repos         = loadAll();
                self.querySearch   = querySearch;
                self.selectedItemChange = selectedItemChange;
                self.searchTextChange   = searchTextChange;
                self.updateCartItem   = updateCartItem;
                self.getCartTotal   = getCartTotal;
                self.setActive   = setActive;
                self.updatePurchaseOrderNumbers = updatePurchaseOrderNumbers;
                self.receiveAll   = receiveAll;
                self.removeCartItem = removeCartItem;
                self.getWarehouseInv   = getWarehouseInv;
                self.save = save;
                self.warehouseChange = warehouseChange;
                self.updateDateReceived = updateDateReceived;
                self.cart = {{ cart | json_encode | raw}};
                self.cart_items = [];
                self.selectedItem = [];
                self.searchText = '';
                self.message = '';
                self.cart_total = {{ total | json_encode | raw }};
                self.initial_total = {{ total | json_encode | raw }};
                self.due_date = new Date("{{ purchaseOrder.stockDueDate |date("Y,m,d") }}");
                self.received_date = new Date("{{ purchaseOrder.orderReceivedDate |date("Y,m,d") }}");
                self.setEdit = setEdit;
                self.updatePortETA = updatePortETA;
                self.updateWarehouseETA = updateWarehouseETA;
                self.isEdit = 0;
                self.warehouses = {{ warehouses | json_encode | raw}};
                self.warehouse = {{ purchaseOrder.warehouse.id }};
                self.physicalContainerNumber = '{{ purchaseOrder.physicalContainerNumber }}';
                self.factoryOrderNumber = '{{ purchaseOrder.factoryOrderNumber }}';
                self.updateIt = updateIt;
                self.all_warehouse_inventory = {};
                self.portEta = new Date("{{ purchaseOrder.portEta |date("Y,m,d") }}");

                function setEdit(val){
                    self.isEdit = val;
                    if(self.isEdit == 1)
                        $(".ui-spinner-button").show();
                }

                function warehouseChange() {
                    updateCart()
                }

                function updatePurchaseOrderNumbers() {
                    showSpinner();
                    $.ajax({
                        type: 'POST',
                        url: "{{ path('api_update_purchase_order_numbers') }}",
                        dataType: 'json',
                        data: {physicalContainerNumber: self.physicalContainerNumber, factoryOrderNumber: self.factoryOrderNumber, purchaseOrderId: {{ purchaseOrder.id }} },
                        success: function (data) {
                            window.location.reload();
                        }
                    });
                }

                function updateCart() {
                    angular.forEach(self.cart, function(value, key) {
                        $log.info(value);

                        $.ajax({
                            type: 'POST',
                            url: "{{ path('api_get_warehouse_inventory_for_product') }}",
                            dataType: 'json',
                            data: {product_variant_id: value.id, warehouse_id: $('#warehouse').val()},
                            success: function (data) {
                                $scope.$apply(function () {
                                    self.cart[key].warehouse_quantity = parseInt(data, 10) + parseInt(self.cart[key].ordered_quantity, 10);
                                });
                            }
                        });
                    });
                }

                function getWarehouseInv(id) {
                    $.ajax({
                        type: 'POST',
                        url: "{{ path('api_update_inventory_for_sites') }}",
                        dataType: 'json',
                        data: {product_variant_id: id},
                        success: function (data) {
                            $scope.$apply(function () {
                                self.all_warehouse_inventory = data;
                            });
                        }
                    });
                }

                function querySearch (query) {
                    $("html").css("overflow-y", "initial");

                    var results = query ? self.repos.filter( createFilterFor(query) ) : self.repos,
                            deferred;
                    if (self.simulateQuery) {
                        deferred = $q.defer();
                        $timeout(function () { deferred.resolve( results ); }, Math.random() * 1000, false);
                        return deferred.promise;
                    } else {
                        return results;
                    }
                }

                function searchTextChange(text) {
                    $("html").css("overflow-y", "initial");

                    $log.info('Text changed to ' + text);
                }

                function selectedItemChange(item) {
                    $("html").css("overflow-y", "initial");

                    if(item != undefined) {
                        if(!self.cart_items[self.selectedItem.id]) {
                            var index = self.cart.push(self.selectedItem) - 1;
                            self.cart_items[self.selectedItem.id] = index;
                            updateCart();
                            resetSearch();
                        }
                    }
                }

                function resetSearch() {
                    self.selectedItem = null;
                    self.searchText = null;
                    $("#search").attr("aria-expanded","false");
                }


                /**
                 * Build `components` list of key/value pairs
                 */
                function loadAll() {
                    var repos = {{ products | json_encode | raw}};

                    return repos.map( function (repo) {
                        repo.value = repo.name.toLowerCase();
                        return repo;
                    });
                }

                /**
                 * Create filter function for a query string
                 */
                function createFilterFor(query) {
                    $("html").css("overflow-y", "initial");

                    var lowercaseQuery = angular.lowercase(query);

                    return function filterFn(item) {
                        return (item.value.indexOf(lowercaseQuery) === 0);
                    };
                }

                function getCartTotal() {
                    var total = 0;
                    angular.forEach(self.cart, function(value, key) {
                        total += value.received_quantity;
                    });
                    return total;
                }

                function save(draft){
                    addSpinner();

                    $.ajax({
                        type: 'POST',
                        url: "{{ path('api_save_purchase_order') }}",
                        dataType: 'json',
                        data: {cart: self.cart, due_date: self.due_date, message: self.message, warehouse_id: {{ purchaseOrder.warehouse.id }}, status: draft, purchase_order_id: {{ purchaseOrder.id }} },
                        success: function (data) {
                            window.location.href = Routing.generate('purchaseorder_show', {id: data});
                        }
                    });

                }

                function setActive(){
                    addSpinner();
                    $.ajax({
                        type: 'POST',
                        url: "{{ path('api_set_purchase_order_active') }}",
                        dataType: 'json',
                        data: { id: {{ purchaseOrder.id }}},
                        success: function (data) {
                            window.location.href = Routing.generate('purchaseorder_show', {id: data});
                        }
                    });

                }

                function updateCartItem(newVal, oldVal, index) {
                    $("html").css("overflow-y", "initial");

                    var total = 0;
                    self.cart[index].warehouse_quantity = parseInt(self.cart[index].warehouse_quantity,10) + parseInt(newVal - oldVal,10);
                    self.cart[index].total_quantity = parseInt(self.cart[index].total_quantity,10) + parseInt(newVal - oldVal,10);
                    angular.forEach(self.cart, function(value, key) {

                        total += value.received_quantity;
                    });
                    self.cart_total = total;
                }

                function receiveAll(){
                    addSpinner();

                    $.ajax({
                        type: 'POST',
                        url: "{{ path('api_purchase_order_receive_all') }}",
                        dataType: 'json',
                        data: { cart: self.cart, due_date: self.due_date, message: self.message, purchase_order_id: {{ purchaseOrder.id }} },
                        success: function (data) {
                            window.location.href = Routing.generate('purchaseorder_show', {id: data});
                        }
                    });

                }

                function updateIt() {
                    $("html").css("overflow-y", "initial");
                }

                function removeCartItem(index) {
                    console.log(index);
                    var total = 0;
                    var tmp = [];
                    var tmpItems = [];
                    angular.forEach(self.cart, function(value, key) {
                        if(key != index) {
                            var tmpIndex = tmp.push(self.cart[key]) - 1;
                            tmpItems[value.id] = tmpIndex;
                            total += value.ordered_quantity;
                        }
                    });

                    console.log('old cart: ');
                    console.log(JSON.stringify(self.cart,null,4));
                    console.log('tmp: ');
                    console.log(JSON.stringify(tmp,null,4));
                    self.cart = [];
                    self.cart = tmp;
                    self.cart_items = [];
                    self.cart_items = tmpItems;
                    self.cart_total = total;
                }


                function updateDateReceived(){
                    addSpinner();
                    {#alert({{ purchaseOrder.id }});#}
                    $.ajax({
                        type: 'POST',
                        url: "{{ path('api_update_date_received') }}",
                        daraType: 'json',
                        data: { due_date: self.due_date, purchase_order_id: {{ purchaseOrder.id}} },
                        success: function (data) {
                            window.location.href = Routing.generate('purchaseorder_show', {id: data});
                        }
                    })
                }

                function updatePortETA(){
                    addSpinner();
                    {#alert({{ purchaseOrder.id }});#}
                    $.ajax({
                        type: 'POST',
                        url: "{{ path('api_update_port_eta') }}",
                        daraType: 'json',
                        data: { due_date: self.portEta, purchase_order_id: {{ purchaseOrder.id}} },
                        success: function (data) {
                            window.location.href = Routing.generate('purchaseorder_show', {id: data});
                        }
                    })
                }

                function updateWarehouseETA(){
                    addSpinner();
                    {#alert({{ purchaseOrder.id }});#}
                    $.ajax({
                        type: 'POST',
                        url: "{{ path('api_update_warehouse_eta') }}",
                        daraType: 'json',
                        data: { due_date: self.due_date, purchase_order_id: {{ purchaseOrder.id}} },
                        success: function (data) {
                            window.location.href = Routing.generate('purchaseorder_show', {id: data});
                        }
                    })
                }
            };

            function jqSpinner() {
                return {
                    require: 'ngModel',
                    link: function (scope, element, attrs, self) {
                        element.spinner({
                            spin: function (event, ui) {
                                self.$setViewValue(ui.value);
                            }
                        });
                    }
                };
            };

        })();


    </script>
{% endblock footer %}

{% block content %}
    <style>

        .table-form {
            padding: 0px !important;
        }
        .table-form input {
            text-align: center !important;
            margin-bottom: -8px !important;
            height: 60px !important;
        }
        .table-name {
            text-align: center !important;
        }

        span.ui-spinner.ui-state-default.ui-widget.ui-widget-content.ui-corner-all {
            display: flex;
        }
        /*input[type=number]::-webkit-inner-spin-button,*/
        /*input[type=number]::-webkit-outer-spin-button {*/
            /*opacity: 0;*/
        /*}*/
        /*.ui-spinner-button {*/
            /*height: 50%;*/
            /*position: absolute;*/
        /*}*/
        /*.ui-spinner-up:hover, .ui-spinner-down:hover {*/
            /*text-decoration: none;*/
        /*}*/
        /*.ui-spinner-up {*/
            /*top: 12px;*/
            /*right: 0;*/
        /*}*/
        /*.ui-spinner-down {*/
            /*bottom: -5px;*/
            /*right: 0;*/
        /*}*/
    </style>
    <div  ng-controller="myCtrl as ctrl" layout="column" ng-cloak="" class="autocompletedemoCustomTemplate" ng-app="myApp">

        <div class="table">
            <div class="row">
                {% if purchaseOrder.status.name == 'Active' or purchaseOrder.status.name == 'Draft' %}
                    <div class="col-md-4">
                        <h5>Port ETA<md-datepicker ng-model="ctrl.portEta" ng-change="ctrl.updatePortETA()" ng-disabled="ctrl.isEdit == 0" md-placeholder="Enter date"></md-datepicker></h5>
                    </div>
                {% else %}
                    <div class="col-md-4">
                        <h5>Date Received
                            <md-datepicker ng-model="ctrl.received_date" md-placeholder="Change Received Date" md-current-view=""></md-datepicker></h5>
                    </div>

                {% endif %}
                <div class="col-md-2">
                    <span class="mdl-chip mdl-chip--contact" style="margin-top: 27px;">
                            <span class="mdl-chip__contact mdl-color-text--white" style="background-color: {{ purchaseOrder.status.color }};">{{ purchaseOrder.status.nameFirstLetter }}</span>
                            <span class="mdl-chip__text">
                                {{ purchaseOrder.status.name }}
                            </span>
                        </span>
                </div>
                <div class="col-md-6">
                    <div style="margin: 15px 20px 0;" ng-if="ctrl.isEdit == 0">
                    {% if purchaseOrder.status.name == 'Active' %}
                        <a class="btn btn-raised btn-warning" style="float: right;  font-weight: 700;margin-right: 10px;" ng-click="ctrl.updatePurchaseOrderNumbers()">SAVE</a>
                        <a class="btn btn-raised btn-success" style="float: right;  font-weight: 700;margin-right: 10px;" ng-click="ctrl.receiveAll()">RECEIVE ALL</a>
                        <a class="btn btn-raised btn-default" style="float: right;  font-weight: 700;margin-right: 10px;" ng-click="ctrl.setEdit(1)">EDIT</a>
                    {% elseif purchaseOrder.status.name == 'Draft' %}
                        <a class="btn btn-raised btn-warning" style="float: right;  font-weight: 700;margin-right: 10px;" ng-click="ctrl.setActive()">APPROVE</a>
                    {% else %}
                        <a class="btn btn-raised btn-warning" style="float: right;  font-weight: 700;margin-right: 10px;" ng-click="ctrl.updateDateReceived()">Update Time</a>
                    {% endif %}
                    </div>
                    <div style="margin: 15px 20px 0;" ng-if="ctrl.isEdit == 1">
                        <a class="btn btn-raised btn-warning" style="float: right;  font-weight: 700;margin-right: 10px;" ng-click="ctrl.updatePurchaseOrderNumbers()">SAVE</a>
                        <a class="btn btn-raised btn-success" style="float: right;  font-weight: 700;margin-right: 10px;" ng-click="ctrl.save('Active')">UPDATE</a>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <h5>Warehouse Eta<md-datepicker ng-model="ctrl.due_date" ng-disabled="ctrl.isEdit == 0" ng-change="ctrl.updateWarehouseETA()" md-placeholder="Enter date"></md-datepicker></h5>
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-md-6">
                    <form id="warehouse-form">
                        <label for="warehouse">Warehouse</label>
                        <div>
                                <h4 style="color:lightslategray;list-style-type:none">Physical Container Number: <input class="form-control" type="text" ng-model="ctrl.physicalContainerNumber"></h4>
                                <h4 style="color:lightslategray;list-style-type:none">Factory Order Number: <input class="form-control" type="text" ng-model="ctrl.factoryOrderNumber"></h4>
                        </div>
                        {% verbatim %}
                        <select class="form-control" id="warehouse" ng-disabled="ctrl.isEdit == 0" style="width: 100%;margin: 24px 0 16px;"
                            ng-model="ctrl.warehouse"
                            ng-change="ctrl.warehouseChange()"
                            ng-options="option.name for option in ctrl.warehouses track by option.id" required>
                        </select>
                        {% endverbatim %}
                    </form>
                </div>
                <div class="col-md-6">
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-md-12">
                    <table class="mdl-data-table mdl-js-data-table mdl-shadow--2dp" style="width: 100%;">
                        <thead>
                        <tr>
                            <th class="mdl-data-table__cell--non-numeric">Item</th>
                            <th class="table-name" style="width: 150px;">Expected</th>
                            <th class="table-name" style="width: 100px;">Received</th>
                            <th class="table-name" style="width: 175px;">Selected Warehouse Inv.</th>
                            <th class="table-name" style="width: 175px;">Total All Sites Inv.</th>
                            <th ng-if="ctrl.isEdit == 1"></th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr  ng-model="cart" ng-repeat="(key, item) in ctrl.cart track by $index">
                            <div  ng-if="item.name != null">
                                {% verbatim %}
                            <td class="mdl-data-table__cell--non-numeric">
                                <img src="{{item.image_url}}" style="height: 34px; padding-right: 15px;">
                                {{ item.name }}
                            </td>
                            <td class="table-form ordered-quantity">
                                 <input id="{{item.id}}" ng-model="item.ordered_quantity" type="number" class="form-control " ng-change="ctrl.updateCartItem(item.ordered_quantity, {{item.ordered_quantity}}, $index)" ng-disabled="ctrl.isEdit == 0" jq-spinner style="border-bottom: none; width: 50%; margin-left: auto; margin-right: auto;">
                            </td>
                            <td class="table-form" style="text-align: center;">
                                <input class="form-control number_select" ng-model="item.received_quantity" type="number" min="0" ng-change="ctrl.updateCartItem(item.received_quantity, {{item.received_quantity}}, $index)"   >
                            </td>
                            <td class="table-form" >
                                <input ng-model="item.warehouse_quantity" class="form-control" style="border-bottom: none;" disabled>
                            </td>
                            <td class="table-form" >
                                <!--<input ng-model="item.total_quantity" class="form-control" style="border-bottom: none;" disabled>-->
                                <div class="dropdown" style="text-align: center;">
                                    <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown" ng-model="item.total_quantity" ng-click="ctrl.getWarehouseInv(item.id)" class="form-control" style="font-family:inherit; color:black">{{ item.total_quantity }}
                                    <span class="caret"></span></button>

                                    <ul class="dropdown-menu" style="height:auto;max-height:300px;min-height: 100px;overflow-x: scroll;min-width: 340px;margin-left:-206px;box-shadow: black 0px 7px 40px -10px;">
                                        <li ng-model="ctrl.all_warehouse_inventory" ng-repeat="item in ctrl.all_warehouse_inventory track by $index" style="padding-left:10px;">
                                              {{item.quantity}} : {{ item.name }}
                                            </ul>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                               <td ng-if="ctrl.isEdit == 1" class="table-form" style="width:140px;text-align: center;" >
                                   <a class="btn btn-raised btn-danger" ng-click="ctrl.removeCartItem($index)">Remove</a>
                               </td>
                                  {% endverbatim %}
                            </div>
                        </tr>
                        <tr id="search" ng-if="ctrl.isEdit == 1">
                            <td class="mdl-data-table__cell--non-numeric" style="padding: 0px;">
                                {% verbatim %}
                            <md-content>
                            <md-autocomplete
                                ng-disabled="ctrl.isDisabled"
                                md-no-cache="true"
                                md-selected-item="ctrl.selectedItem"
                                md-search-text-change="ctrl.searchTextChange(ctrl.searchText)"
                                md-search-text="ctrl.searchText"
                                md-selected-item-change="ctrl.selectedItemChange(item)"
                                md-items="item in ctrl.querySearch(ctrl.searchText)"
                                md-item-text="item.name"
                                md-min-length="0"
                                placeholder="Pick a Product"
                                md-autofocus="false"
                                ng-click="ctrl.updateIt()"
                                md-menu-class="autocomplete-custom-template">
                                <md-item-template>
                                    <span class="item-title">
                                        <img src="{{item.image_url}}" style="max-width: 50px;">
                                        <span> {{item.name}} </span>
                                    </span>
                                    <span class="item-metadata">
                                        <span class="item-metastat">
                                            <strong>{{item.warehouse_quantity}}</strong> warehouse quantity
                                        </span>
                                        <span class="item-metastat">
                                           <strong>{{item.total_quantity}}</strong> total quantity
                                        </span>

                                     </span>
                                </md-item-template>
                                <md-not-found>
                                       No product matching "{{ctrl.searchText}}" were found.
                                    </md-not-found>
                            </md-autocomplete>
                            </md-content>
                                {% endverbatim %}
                            </td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <hr>
            <div class="row" style="margin-top: 10px;">
                <!-- accepted payments column -->
                <div class="col-xs-9">
                    <p class="text-muted well well-sm no-shadow" >
                        <label for="message">Comments</label>
                        <textarea type="text" rows="1" id="message" ng-model="ctrl.message" class="form-control" style="height: 100px;"></textarea>
                    </p>

                </div>
                <!-- /.col -->
                <div class="col-xs-3">
                    <div class="table-responsive">
                        <table class="table">
                            <tbody>
                            <tr>
                                <th style="width:50%">Total Items:</th>
                                <td>
                                    {% verbatim %}
                                <input ng-model="ctrl.cart_total" class="form-control" style="border-bottom: none; font-size: xx-large; font-weight: 800;" disabled>
                                {% endverbatim %}
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </div>

                </div>
                <!-- /.col -->
            </div>
        </div>





    </div>
{% endblock %}
