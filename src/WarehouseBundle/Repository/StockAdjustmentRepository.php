<?php

namespace WarehouseBundle\Repository;
use WarehouseBundle\Entity\PurchaseOrder;
use WarehouseBundle\Entity\StockAdjustment;
use WarehouseBundle\Entity\StockTransfer;
use WarehouseBundle\Entity\Warehouse;

/**
 * StockTransferRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockAdjustmentRepository extends \Doctrine\ORM\EntityRepository
{

    public function getCartArray(StockAdjustment $stockAdjustment)
    {
        $em = $this->getManager();

        $cart = array();
        $total = 0;
        foreach($stockAdjustment->getProductvariants() as $variant) {
            $image_url = '/';
            foreach($variant->getProductVariant()->getProduct()->getImages() as $image) {
                $image_url .= $image->getWebPath();
                break;
            }

            if($stockAdjustment->getStatus()->getName() === 'Completed') {
                $tq = $variant->getTotalQuantityAfter();
                $wq = $variant->getWarehouseQuantityAfter();
            }
            else {
                $connection = $em->getConnection();
                $statement = $connection->prepare("SELECT COALESCE(sum(quantity),0) as total FROM warehouse_inventory WHERE product_variant_id = :product_variant_id");
                $statement->bindValue('product_variant_id', $variant->getProductVariant()->getId());
                $statement->execute();
                $total_quantity = $statement->fetch();
                $tq = $total_quantity['total'] + $variant->getQuantity();

                $connection = $em->getConnection();
                $statement = $connection->prepare("SELECT COALESCE(sum(quantity),0) as total FROM warehouse_inventory WHERE product_variant_id = :product_variant_id and warehouse_id = :warehouse_id");
                $statement->bindValue('product_variant_id', $variant->getProductVariant()->getId());
                $statement->bindValue('warehouse_id', $stockAdjustment->getWarehouse()->getId());
                $statement->execute();
                $warehouse_quantity = $statement->fetch();
                $wq = $warehouse_quantity['total'] + $variant->getQuantity();
            }

            $total += $variant->getQuantity();

            $cart[] = array(
                'name' => $variant->getProductVariant()->getProduct()->getName().": ".$variant->getProductVariant()->getName(),
                'id' => $variant->getProductVariant()->getId(),
                'stock_adjustment_product_variant_id' => $variant->getId(),
                'image_url' => $image_url,
                'quantity' => $variant->getQuantity(),
                'total_quantity' => $tq,
                'warehouse_quantity' => $wq,
            );
        }
        return array(
            'cart' => $cart,
            'total' => $total
        );
    }

    public function getActiveForWarehouseArray(Warehouse $warehouse) {
        $em = $this->getManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare("select p.*, s.color, s.name as status_name, w.name as warehouse_name, 'stock_adjustment' as type
	from stock_adjustments p
		left join warehouses w
			on p.warehouse_id = w.id
		left join status s
			on s.id = p.status_id
	where w.id = :warehouse_id 
	and s.name = 'Active'");
        $statement->bindValue('warehouse_id', $warehouse->getId());
        $statement->execute();
        return $statement->fetchAll();
    }

    public function getAllForWarehouseArray(Warehouse $warehouse) {
        $em = $this->getManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare("select p.*, s.color, s.name as status_name, w.name as warehouse_name, 'stock_adjustment' as type
	from stock_adjustments p
		left join warehouses w
			on p.warehouse_id = w.id
		left join status s
			on s.id = p.status_id
	where w.id = :warehouse_id");
        $statement->bindValue('warehouse_id', $warehouse->getId());
        $statement->execute();
        return $statement->fetchAll();
    }

}
